라이브러리( library )
	>> 도서관이라는 뜻
	>> 내가 원하는 정보를 찾아보는 곳
	>> 내가 만든게 아니라 미리 만들어져 있는 모듈을 사용

표준 라이브러리
	>> 파이썬 고수들이 미리 만들어 놓은 라이브러리 ( 모듈 )
	>> 파이썬에 내장되어 있기 때문에 파이썬 설치 시 같이 설치된다.
	>> 모든 라이브러리를 알기는 힘들기 때문에 자주 사용되는 라이브러리를 중심으로 살펴보자.

표준 라이브러리 1. datetime ( 날짜 )
	년, 월, 일을 설정하고 표현할 때 사용하는 함수
	예제로 디데이를 구하는 예제를 해보자
	datetime.date(년, 월, 일) 로 만든 객체를 뺄셈 연산을 하면 day를 기준으로 출력이 된다.
	요일을 알고 싶으면 ? day.weekday()
		이 때, 월요일 - 0 ~ 일요일 6
	이와 다르게 월요일 1 ~ 일요일 7 로 두려면 ? day.isoweekday() 사용

표준 라이브러리 2. time ( 시간 )
	time.time() - 70년 1월 1일 0시 0분 0초를 기준으로 현재까지의 시간을 초 단위로 리턴
	time.localtime() - 작성된 초 단위를 계산해서 연 월 일 시 분 초 등의 형태로 변경
	time.asctime() - localtime에서 리턴된 튜플 형태의 값을 인수로 받아서 날짜와 시간을 알아보기 쉬운 형태로 리턴해주는 함수
	time.ctime() - 현재 날짜와 시간을 보기 좋게 문자열로 리턴해주는 함수
	time.strftime('출력할 형식 포맷 코드', localtime함수로 얻은 튜플 객체)
		%a	요일의 줄임말
		%A	요일
		%b	달의 줄임말
		%B	달
		%c	날짜와 시간
		%d	일(day)
		%H	시간(24시간)
		%l	시간(12시간)
		%j	1년 중 누적날짜
		%m	달(1월~12월)
		%M	분(00분~59분)
		%p	AM / PM
		%S	초(00초~59초)
		%U	1년 중 누적 주 일요일 시작(0~53)
		%w	숫자로된 요일 ( 0(일) ~ 6(토) )
		%W	1년 중 누적 주 월요일 시작(0~53)
		%x	설정된 지역에 기반한 날짜
		%X	설정된 지역에 기반한 시간
		%Y	연도
		%Z	시간대
		%%	문자 %
		%y	세기 부분을 제외한 연도 출력
	time.sleep() - 일정한 시간(초)를 명령을 쉬게 한다.

표준 라이브러리 3. math ( 수학 )
	math.gcd() - 파이썬 3.5버전 이상 사용가능, 등록된 숫자들의 최대공약수를 구하는 함수.
			파이썬 3.9버전부터는 여러 인수 가능하지만 이전 버전에서는 2개까지만 허용 된다.
	math.lcm() - 파이썬 3.9버전 이상 사용가능, 등록된 숫자 중 최소공배수를 구하는 함수
			
표준 라이브러리 4. random ( 난수 )
	random.random() - 0 ~ 1 사이의 난수 출력
	random.randint(n, m) - n 과 m 사이의 정수인 난수 출력
	random.sample(자료구조, n) - 리스트, 튜플 등 자료구조에서 n개의 자료를 랜덤하게 뽑아내기
	random.choice(자료구조) - 리스트, 튜플 등 자료구조에서 1개의 자료를 랜덤하게 뽑아내기

표준 라이브러리 5. itertools ( 반복가능객체 )
	itertools.zip_longest(*반복가능객체) - 내장함수 zip 과 동일한 동작 / 길이가 다르다면 fillvalue를 통해 기본값 지정 가능
	itertools.permutations(반복가능객체, n) - 반복가능객체 중에서 n개를 뽑을 때 나올 수 있는 순서있는 경우의 수
	itertools.combinations(반복가능객체, n) - 반복가능객체 중에서 n개를 뽑을 때 나올 수 있는 순서없는 경우의 수

표준 라이브러리 6. functools ( 함수 )
	functools.reduce(함수, 반복가능객체) - 함수를 반복가능객체의 요소에 차례대로 누적 적용하여 이 객체를 하나의 값으로 줄이는 함수

표준 라이브러리 7. operator.itemgetter ( 정렬시 key 설정 )
	itemgetter() - 주로 sorted 와 같은 함수의 key 매개변수에 적용하여 기준을 쉽게 잡아주는 모듈

표준 라이브러리 8. shutil - 파일을 복사하거나 이동할 때 사용하는 모듈
	shutil.copy(파일경로1, 파일경로2) - 파일1 을 파일2 로 복사
	shutil.move(파일경로1, 파일경로2) - 파일1 을 파일2 로 이동

표준 라이브러리 9. glob - 폴더 내 파일 찾기
	glob.glob("파일") - 폴더 내의 파일 이름 중 * 이나 ? 를 사용해서 원하는 파일만 찾을 수 있다.

표준 라이브러리 10. pickle - 객체를 파일에 저장 및 불러오기
	pickle.dump(데이터, 파일변수) - 객체 데이터를 파일에 저장
	pickle.load(파일변수) - 파일에 저장된 객체 데이터를 불러옴

표준 라이브러리 11. os - 환경 변수나 폴더, 파일 등의 OS 자원을 제어할 수 있게 
	os.environ - 현재 시스템의 환경 변수 값을 리턴
	os.chdir("경로") - 현재 디렉터리 변경
	os.getcwd() - 현재 디렉터리의 경로 출력
	os.systme(명령어문자열) - cmd의 명령을 파이썬에서 호출할 수 있다.
	os.popen() - 시스템 명령어를 실행한 결과를 읽기 모드 형태의 파일 객체로 리턴
	os.mkdir(폴더) - 폴더 생성
	os.rmdir(폴더) - 폴더 삭제 ( 폴더 내에 파일 또는 폴더가 없어야함. )
	os.remove(파일) - 파일 삭제
	os.rename(src, dst) - src라는 이름의 파일을 dst로 변경

표준 라이브러리 12. zipfile - 파일들을 zip형식으로 합치거나 해제할 때 사용
	zipfile.ZipFile(zip파일명, 'w') - zip파일을 파일명으로 새로 만든다.
	zipfile.ZipFile(zip파일명, 'w', compression=압축방식, compresslevel=1~9) - 압축하는 방식과 압축 수준을 가지고 파일을 압축해서 zip파일에 담는다.
	zip파일변수.extract(zip파일안의파일명) - zip파일 안의 파일을 하나만 unzip한다.
	zip파일변수.extractall(경로) - 작성한 경로에 zip파일을 해제한다.

표준 라이브러리 13. tempfile - 임시로 파일 만들 때 사용
	tempfile.mkstemp() - 임시폴더에 임시파일을 무작위로 생성
	tempfile.TemporaryFile() - 임시 저장 공간으로 사용할 파일 객체를 리턴 / 기본적으로 바이너리 쓰기 모드 적용 / f.close() 가 호출되면 자동으로 사라짐

표준 라이브러리 14. traceback - 오류 추적할 때 사용하는 모듈
	traceback.format_exc() - 오류 추적 결과를 문자열로 반환하는 함수

표준 라이브러리 15. json - json파일을 읽고 만들때 사용하는 모듈
	json.load(파일변수) - 파일에 있는 json 내용을 딕셔너리 자료구조 형태로 반환한다.
	json.dump(딕셔너리, 파일변수) - 딕셔너리 자료구조 형태를 json파일로 반환한다.
	json.loads(json데이터변수) - json데이터변수를 딕셔너리 형태로 변환한 문자열을 출력
	json.dumps(딕셔너리) - 딕셔너리 자료구조 형태를 json파일 형식의 문자열로 출력

-------------------------------------------------------------------------------------------------------------
외부 라이브러리
	pip - 파이썬 모듈이나 패키지를 쉽게 설치할 수 있도록 도와주는 도구
	pip install [Package명]			패키지 설치
	pip install [Package명]==버전		패키지의 버전을 설치
	pip uninstall [Package명]			패키지 삭제
	pip install --upgrade [Package명]	패키지 업그레이드
	pip list				설치된 패키지 목록 출력

외부 라이브러리 1. Faker - 테스트용 가짜 데이터를 생성할 때 사용하는 라이브러리
	cmd 창에서 pip install Faker
	Faker('ko-KR') - 무작위로 생성하는 데이터를 한글 기준으로 맞춘다.
	fake.name()				이름
	fake.address()				주소
	fake.postcode()				우편 번호
	fake.country()				국가명
	fake.company()				회사명
	fake.job()					직업명
	fake.phone_number()			휴대전화번호
	fake.email()				이메일 주소
	fake.user_name()				사용자명
	fake.pyint(min_value=0,max_value=100) 	0부터 100 사이의 임의의 숫자
	fake.ipv4_private()				ip 주소
	fake.text()				임의의 문장
	fake.catch_phrase()				한글 임의의 문장
	fake.color_name()				색상명

외부 라이브러리 2. sympy - 방정식 기호를 사용하게 해주는 라이브러리
		fractions - 분수를 사용할 수 있게 해주는 라이브러리

	Fraction(분자, 분모) - 분자/분모를 쉽게 접근할 수 있다

	sympy.symbols(미지수) - 지정한 미지수로 사용할 수 있게 함
	sympy.Eq(식, 값) - 미지수를 가진 식 = 값 의 방정식으로 저장함
	sympy.solve(방정식) - 방정식에 만족하는 값을 리스트 형식으로 반환

	
















